This directory contains all the text matching models. All the models should be based on the `BasicModel` from model.py. And anyone can write their own text matching model just as the arci.py.


Each model is correspong with a configuration file, which aims to specify the parameters in the model. The example config file can be found in "examples/toy_example/config/".
The configuration file is in json format. It will be depicted in details as follows,
1. "net_name" can be set to any names as you like.
2. "global" contains some global parameters for training and predicting.
    1). "model_type": is can be "PY" or "json", as the keras can load model from python file or json file. Here, we use "PY" most of the time as the model is defined in current directory.
    2). "weights_file": a file to save model weights. 
    3). "save_weights_iters": This parameter is only used in training. It worked together with "weights_file". It will save the model weights every "save_weights_iters", and the weights file name is based on the concatenation of "weights_file" and "save_weights_iters".
    4). "test_weights_iters": This parameter is only used in predicting. It worked together with "weights_file". It will load the model weights file in predicting by concatenating the "weights_file" and "test_weights_iters".
    5). "num_iters": the number of batches in training.
    6). "display_interval": display the train loss with test performance each "display_interval" iters.
    7). "optimizer": the optimization method.
    8). "learning_rate": the learning rate in optimizer.
3. "inputs": it contains "share", "train", "valid", "test", and "predict" sections.
    1). "share": contains parameters shared across "train", "valid", "test", and "prediction".
    2). "train": contains parameters for training in the training phase.
    3). "valid": contains parameters for validation in the training phase.
    4). "test": contains parameters for test in the training phase.
    5). "predict": contains parameters for prediction in online phase.
4. "share" parameters:
    1). "text1_corpus": a file contains the content of queries.
    2). "text2_corpus": a file contains the content of documents. Note this parameter can be set the same to "text1_corpus".
    3). "use_dpool": a bool to indicate whether use dynamic pooling. It is used only in MatchPyramid in current models.
    4). "vocab_size": the vocabulary size in word_dict.txt.
    5). "embed_size": word embedding size.
    6). "train_embed": a bool to indicate whether fine tune the word embeddings.
    7). "target_mode": objective mode, can be "ranking", "regression", and "classification". Note when in "classification" model, the parameter "class_num" should be set.
    8). "class_num": an integer denote to the number of classes in "classification" mode.
    9). "text1_maxlen": an integer denote to the maximum number of words for text1. Each text longer than this length will be cut into "text1_maxlen", and each text less than this length will be padded with pre-defined value.
    10). "text2_maxlen": an integer denote to the maximum number of words for text2. The same with "text1_maxlen"
5. "train", "valid", "test", and "predict" parameters, this four field have the same fields:
    1). "input_type": this field is connect with the data type. It can generator point-wise data, pair-wise data, and list-wise data. This value should be set with a class name from 'matchzoo/inputs/point_generator.py', 'matchzoo/inputs/pair_generator.py', and 'matchzoo/inputs/list_generator.py',
    2). "phase": This value can be "TRAIN" or "EVAL".
    3). "use_iter": A bool value to indicate whether generating batch data iteratively. While it is set to "true", then, "query_per_iter" and "batch_per_iter" should also be set.
    4). "query_per_iter": the number of queries used in a mini-batch, only used in pair-wise mode. When "use_iter" is set to false, this field is disabled.
    5). "batch_per_iter":  this field is combined with "query_per_iter" to decide the source of the batch data.
    6). "batch_size": the batch size for training or validation.
    7). "relation_file": a relation file which contains a pair of text id and their corresponding label. e.g. "1 Q1 D1"
6. "outputs": save the outputs of "predict".
    1). "save_format": it can be "TEXTNET" of "TREC", "TEXTNET" is an output format from textnet (), and "TREC" is an output format for trec.
    2). "save_path": the file to save the outputs.
7. "model": this field contains hyper-parameters of models for trainiing.
    1). "model_path": a string indicate the location of the model file.
    2). "model_py": the model name. e.g. "arci.ARCI", "arci" indicates the model file is arci.py. and "ARCI" is the model class name in arci.py.
    3). "setting": contains the specific parameters for the  model in "model_py".
8. "losses": contains the objective loss functions:
    1). "object_name": the objective name. It can be the default objective in keras or the pre-defined objective in "matchzoo/losses/rank_losses.py"
    2). "object_params": the parameters connected with "object_name". e.g. "margin" for "rank_hing_loss".
9. "metrics": contains the evaluation metrics. It can be the default evaluation metrics in keras, or the pre-defined metrics in "matchzoo/metrics/evaluation.py". e.g. "MAP", "NDCG@10".
